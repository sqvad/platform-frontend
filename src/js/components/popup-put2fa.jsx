import React from 'react';
import Any from '../any.jsx';
import If from './if.jsx';
import Popup from './popup-base.jsx';
import PopupWithForm from './popup-with-form.jsx';
import Form from './form.jsx';
import Input from './input.jsx';
import A from './a.jsx';



class PopupPut2fa extends PopupWithForm {
	constructor(props) {
		super(props);
		this.setState({code2fa:""});
		this.makePromise = this.makePromise.bind(this);
		this.onClose = this.onClose.bind(this);
	}
	renderContent(p,s,c,m) {
		return <div>
			<h1 className="h1-center mt-0">ENTER 2-FACTOR <br />AUTHENTICATION CODE</h1>
			<p>
				<img
					src="img/set2fa-popup.png" width="65" height="105"
					style={{float:"left",marginRight:"18px",position:"relative",top:"-3px"}}
				/>
				Please enter the 6-digit code generated by the authentication app on your device to{" "}
				{p.str_put2faTo||"verify the transaction"}
			</p>
			<Form handler={this}>
				<Input
					type="text" placeholder="AUTHENTICATION CODE"
					hint={s.fetching ? "Loading...": s.serverError ? s.serverError.message : "E.g. 123 456"}
					value={s.code2fa} onChange={(this.onCode.bind(this))}
					hasError={!s.codeValid || !!s.serverError}
					checkValid={str=>(str+'').replace(/\D+/g, "").length==6} required
					autofocus m={m}
				/>
				<div className="d-flex flex-column align-items-center justify-content-center mt-4">
					<Form.SubmitButton
						canSubmit={s.codeValid} fetching={s.fetching}
						clsColor="btn-primary" cls="btn-lg mb-3"
					>
						SEND
					</Form.SubmitButton>
					<A m={m} className="text-muted external" href="/forgot2fa"><small>I donâ€™t have access to my 2FA</small></A>
				</div>
			</Form>
		</div>;
	}
	onCode(code2fa,codeValid) {
		this.form.forgotAboutServerError();
		this.setState({code2fa,codeValid}, ()=>{
			this.forceUpdate();
		});
	}
	makePromise(p,s) {
		return Form.wrapFetch(this, false, p.makePromise(s.code2fa,this))
		.catch(x=>{
			if ((x && x.message||"").toLowerCase().indexOf("Verification code".toLowerCase())>-1) {
				return x;
			} else if (p.catchPromise) {
				return p.catchPromise(x);
			} else {
				throw x;
			}
		});
	}
	onClose() {
		var p = this.props;
		return super.onClose ? super.onClose() : p.onClose && p.onClose();
	}
}

export default PopupPut2fa;
